pipeline {
    agent any
    environment {
        BACKEND_SERVER_IP = credentials('backend_server_ip')
        DJANGO_IMAGE_NAME='kunalmehta14/realestate-django-service'
        ML_IMAGE_NAME='kunalmehta14/realestate-ml-logic-service'
        DJANGO_IMAGE_VERSION='1'
        ML_IMAGE_VERSION='1'
        GITHUB_TOKEN = credentials('github_token')
    }
    stages {
        stage('Clone the repo') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'clone the repo'
                    sh 'rm -fr RealEstate-DataAPI'
                    sh 'git clone https://github.com/kunalmehta14/RealEstate-DataAPI.git'
                }
            }
        }
        stage('Deploy it to backend server') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sshagent(['backend_server_ssh']) {
                        sh 'ssh -o StrictHostKeyChecking=no -l jenkins $BACKEND_SERVER_IP "git init /opt/backend_server$"'
                        sh 'ssh -o StrictHostKeyChecking=no -l jenkins $BACKEND_SERVER_IP "git config --global --add safe.directory /opt/backend_server$"'
                        sh 'ssh -o StrictHostKeyChecking=no -l jenkins $BACKEND_SERVER_IP "git -C /opt/backend_server$ pull https://github.com/kunalmehta14/RealEstate-DataAPI.git"'
                    }
                }
            }
        }
        stage('Copy Environmental Variables'){
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    withCredentials([file(credentialsId: 'django_service_env', variable: 'django_service_env')]) {
                        sshagent(['backend_server_ssh']) {
                            sh 'scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r $django_service_env jenkins@$BACKEND_SERVER_IP:/opt/backend_server/django-projects'
                        }
                    }
                }
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    withCredentials([file(credentialsId: 'ml_service_env', variable: 'ml_service_env')]) {
                        sshagent(['backend_server_ssh']) {
                            sh 'scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r $django_service_env jenkins@$BACKEND_SERVER_IP:/opt/backend_server/ml-logic-service/src'
                        }
                    }
                }
            }
        }
        stage('Remove existing image') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sshagent(['backend_server_ssh']) {
                        sh 'ssh -o StrictHostKeyChecking=no -l jenkins $BACKEND_SERVER_IP "docker rmi $DJANGO_IMAGE_NAME:$DJANGO_IMAGE_VERSION"'
                        sh 'ssh -o StrictHostKeyChecking=no -l jenkins $BACKEND_SERVER_IP "docker rmi $ML_IMAGE_NAME:$ML_IMAGE_VERSION"'
                    }
                }
            }
        }
        stage('Build image') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sshagent(['backend_server_ssh']) {
                        sh 'ssh -o StrictHostKeyChecking=no -l jenkins $BACKEND_SERVER_IP "docker build -t $DJANGO_IMAGE_NAME:$DJANGO_IMAGE_VERSION /opt/backend_server/django-service"'
                        sh 'ssh -o StrictHostKeyChecking=no -l jenkins $BACKEND_SERVER_IP "docker build -t $ML_IMAGE_NAME:$ML_IMAGE_VERSION /opt/backend_server/ml-logic-service"'
                    }
                }
            }
        }
        stage('Login to GHCR') {
            steps {
                sshagent(['backend_server_ssh']) {
                    sh 'ssh -o StrictHostKeyChecking=no -l jenkins $BACKEND_SERVER_IP "echo $GITHUB_TOKEN_PSW | docker login ghcr.io -u $GITHUB_TOKEN_USR --password-stdin"'
                }
            }
        }
        stage('Tag image') {
            steps {
                sshagent(['backend_server_ssh']) {
                    sh 'ssh -o StrictHostKeyChecking=no -l jenkins $BACKEND_SERVER_IP "docker tag $DJANGO_IMAGE_NAME:$DJANGO_IMAGE_VERSION ghcr.io/$DJANGO_IMAGE_NAME:$DJANGO_IMAGE_VERSION"'
                    sh 'ssh -o StrictHostKeyChecking=no -l jenkins $BACKEND_SERVER_IP "docker tag $ML_IMAGE_NAME:$ML_IMAGE_VERSION ghcr.io/$ML_IMAGE_NAME:$ML_IMAGE_VERSION"'
                }
            }
        }
        stage('Push image') {
            steps {
                sshagent(['backend_server_ssh']) {
                    sh 'ssh -o StrictHostKeyChecking=no -l jenkins $BACKEND_SERVER_IP "docker push ghcr.io/$DJANGO_IMAGE_NAME:$DJANGO_IMAGE_VERSION"'
                    sh 'ssh -o StrictHostKeyChecking=no -l jenkins $BACKEND_SERVER_IP "docker push ghcr.io/$ML_IMAGE_NAME:$ML_IMAGE_VERSION"'
                }
            }
        }
        stage('Stop and remove docker service') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sshagent(['backend_server_ssh']) {
                        sh 'ssh -o StrictHostKeyChecking=no -l jenkins $BACKEND_SERVER_IP "docker stop django-service ml-logic-service"'
                        sh 'ssh -o StrictHostKeyChecking=no -l jenkins $BACKEND_SERVER_IP "docker rm django-service ml-logic-service"'
                    }
                }
            }
        }
        stage('Start docker service') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sshagent(['backend_server_ssh']) {
                        sh 'ssh -o StrictHostKeyChecking=no -l jenkins $BACKEND_SERVER_IP "docker compose -f /opt/backend_server/docker-compose.yaml up -d --no-deps --build --always-recreate-deps"'
                    }
                }
            }
        }
    }
}